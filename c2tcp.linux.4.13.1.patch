diff -rupN "linux-4.13 - Copy/include/linux/tcp.h" linux-4.13-c2tcp/include/linux/tcp.h
--- "linux-4.13 - Copy/include/linux/tcp.h"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/include/linux/tcp.h	2018-03-24 17:14:18.963122600 -0400
@@ -370,6 +370,12 @@ struct tcp_sock {
 	 * socket. Used to retransmit SYNACKs etc.
 	 */
 	struct request_sock *fastopen_rsk;
+	/* C2TCP Parameters */
+	u32 first_above_time;
+	u32 next_time;
+	u32 cnt_rtt;
+	u16 rec_inv_sqrt;
+	/*END of C2TCP*/
 	u32	*saved_syn;
 };
 
diff -rupN "linux-4.13 - Copy/include/net/tcp.h" linux-4.13-c2tcp/include/net/tcp.h
--- "linux-4.13 - Copy/include/net/tcp.h"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/include/net/tcp.h	2018-03-24 17:14:21.185350600 -0400
@@ -277,6 +277,33 @@ extern int sysctl_tcp_autocorking;
 extern int sysctl_tcp_invalid_ratelimit;
 extern int sysctl_tcp_pacing_ss_ratio;
 extern int sysctl_tcp_pacing_ca_ratio;
+/*
+* Custom variables for sysctl Params
+*/
+extern unsigned int sysctl_tcp_bbr_enable_app_limited;
+extern unsigned int sysctl_tcp_bbr_enable_lt_bw;
+extern unsigned int sysctl_tcp_bbr_cwnd_rv_gain;
+extern unsigned int sysctl_tcp_bbr_enable_maxdelay;
+extern unsigned int sysctl_tcp_bbr_enable_probertt;
+extern unsigned int sysctl_tcp_bbr_targetdelay;
+extern unsigned int sysctl_bbr_min_rtt_win_sec;
+extern unsigned int sysctl_bbr_probe_rtt_mode_ms;
+extern unsigned int sysctl_tcp_bbr_bw_auto;
+extern unsigned int sysctl_tcp_bbr_bw;
+extern unsigned int sysctl_tcp_bbr_debug;
+extern unsigned int sysctl_tcp_bbr_init_cwnd;
+
+/* C2TCP */
+extern int sysctl_tcp_c2tcp_enable;
+extern int sysctl_tcp_c2tcp_interval;
+extern int sysctl_tcp_c2tcp_target;
+extern int sysctl_tcp_c2tcp_alpha;
+extern int sysctl_tcp_c2tcp_x;
+/**End*/
+
+/*
+* End of custom variables
+*/
 
 extern atomic_long_t tcp_memory_allocated;
 extern struct percpu_counter tcp_sockets_allocated;
@@ -988,6 +1015,8 @@ struct tcp_congestion_ops {
 	/* get info for inet_diag (optional) */
 	size_t (*get_info)(struct sock *sk, u32 ext, int *attr,
 			   union tcp_cc_info *info);
+	/*NATCP*/
+	void (*update_by_app)(struct sock *sk);
 
 	char 		name[TCP_CA_NAME_MAX];
 	struct module 	*owner;
diff -rupN "linux-4.13 - Copy/include/uapi/linux/inet_diag.h" linux-4.13-c2tcp/include/uapi/linux/inet_diag.h
--- "linux-4.13 - Copy/include/uapi/linux/inet_diag.h"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/include/uapi/linux/inet_diag.h	2018-03-24 17:14:23.948227000 -0400
@@ -184,6 +184,7 @@ struct tcp_bbr_info {
 	__u32	bbr_min_rtt;		/* min-filtered RTT in uSec */
 	__u32	bbr_pacing_gain;	/* pacing gain shifted left 8 bits */
 	__u32	bbr_cwnd_gain;		/* cwnd gain shifted left 8 bits */
+	__u32	bbr_inflight;
 };
 
 union tcp_cc_info {
diff -rupN "linux-4.13 - Copy/include/uapi/linux/sysctl.h" linux-4.13-c2tcp/include/uapi/linux/sysctl.h
--- "linux-4.13 - Copy/include/uapi/linux/sysctl.h"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/include/uapi/linux/sysctl.h	2018-03-24 17:14:25.650129500 -0400
@@ -424,6 +424,26 @@ enum
 	NET_TCP_ALLOWED_CONG_CONTROL=123,
 	NET_TCP_MAX_SSTHRESH=124,
 	NET_TCP_FRTO_RESPONSE=125,
+	/* Variable for TCP BBR Target Delay */
+	NET_TCP_BBR_ENABLE_MAXDELAY=126,
+	NET_TCP_BBR_ENABLE_PROBERTT=127,
+	NET_TCP_BBR_TARGETDELAY=128,
+	NET_TCP_BBR_MINRTTWINSEC=129,
+	NET_TCP_BBR_PROBERTTMODEMS=130,
+	NET_TCP_BBR_BW_AUTO=131,
+	NET_TCP_BBR_BW=132,
+	NET_TCP_BBR_DEBUG=133,
+	NET_TCP_BBR_CWND_RV_GAIN=134,
+	NET_TCP_BBR_ENABLE_LT_BW=135,
+	NET_TCP_BBR_ENABLE_APP_LIMITED=136,
+	NET_TCP_BBR_INIT_CWND=136,
+
+	/* Variables for C2TCP*/
+	 NET_TCP_C2TCP_ENABLE=150,
+	 NET_TCP_C2TCP_INTERVAL=151,
+	 NET_TCP_C2TCP_TARGET=152,
+	 NET_TCP_C2TCP_ALPHA=153,
+	 NET_TCP_C2TCP_X=154,
 };
 
 enum {
diff -rupN "linux-4.13 - Copy/include/uapi/linux/tcp.h" linux-4.13-c2tcp/include/uapi/linux/tcp.h
--- "linux-4.13 - Copy/include/uapi/linux/tcp.h"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/include/uapi/linux/tcp.h	2018-03-24 17:14:25.672278400 -0400
@@ -120,6 +120,31 @@ enum {
 #define TCP_ULP			31	/* Attach a ULP to a TCP connection */
 #define TCP_MD5SIG_EXT		32	/* TCP MD5 Signature with extensions */
 
+/*
+ * Defining custom Socket TCP Options
+*/
+#define TCP_BBR_EN_MAXDEL 33
+#define TCP_BBR_EN_PRBRTT 34
+#define TCP_BBR_TRGTDEL_US 35
+#define TCP_BBR_MINRTTWIN_SEC 36
+#define TCP_BBR_PRBERTTMDE_MS 37
+#define TCP_BBR_BWAUTO 38
+#define TCP_BBR_BWVAL 39
+#define TCP_BBR_CWNDRVGAIN 40
+#define TCP_BBR_DEBUG 41
+#define TCP_CWND_CLAMP 42
+
+/*C2TCP*/
+#define  TCP_C2TCP_ENABLE 50
+#define  TCP_C2TCP_INTERVAL 51
+#define  TCP_C2TCP_TARGET 52
+#define TCP_C2TCP_ALPHA 53
+#define  TCP_C2TCP_X 54
+
+/*
+ * End of Custom Socket Defines
+*/
+
 struct tcp_repair_opt {
 	__u32	opt_code;
 	__u32	opt_val;
diff -rupN "linux-4.13 - Copy/kernel/sysctl_binary.c" linux-4.13-c2tcp/kernel/sysctl_binary.c
--- "linux-4.13 - Copy/kernel/sysctl_binary.c"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/kernel/sysctl_binary.c	2018-03-24 17:14:27.991416300 -0400
@@ -391,6 +391,32 @@ static const struct bin_table bin_net_ip
 	{ CTL_STR,	NET_TCP_CONG_CONTROL,			"tcp_congestion_control" },
 	{ CTL_INT,	NET_TCP_MTU_PROBING,			"tcp_mtu_probing" },
 	{ CTL_INT,	NET_TCP_BASE_MSS,			"tcp_base_mss" },
+
+	 /*C2TCP Functionality*/
+	 { CTL_INT,  NET_TCP_C2TCP_ENABLE,          "tcp_c2tcp_enable" },
+	 { CTL_INT,  NET_TCP_C2TCP_INTERVAL,     	"tcp_c2tcp_interval" },
+	 { CTL_INT,  NET_TCP_C2TCP_TARGET,          "tcp_c2tcp_target" },
+	 { CTL_INT,  NET_TCP_C2TCP_ALPHA,           "tcp_c2tcp_alpha" },
+	 { CTL_INT,  NET_TCP_C2TCP_X,               "tcp_c2tcp_x" },
+	 /*End*/
+
+	 /*Custom sysctl control params added for BBR*/
+
+	{ CTL_INT,	NET_TCP_BBR_INIT_CWND,				"tcp_bbr_init_cwnd" },
+	{ CTL_INT,	NET_TCP_BBR_ENABLE_APP_LIMITED,		"tcp_bbr_enable_app_limited" },
+	{ CTL_INT,	NET_TCP_BBR_ENABLE_LT_BW,			"tcp_bbr_enable_lt_bw" },
+	{ CTL_INT,	NET_TCP_BBR_CWND_RV_GAIN,			"tcp_bbr_cwnd_rv_gain" },
+	{ CTL_INT,	NET_TCP_BBR_DEBUG,					"tcp_bbr_debug" },
+	{ CTL_INT,	NET_TCP_BBR_ENABLE_MAXDELAY,		"tcp_bbr_enable_maxdelay" },
+	{ CTL_INT,	NET_TCP_BBR_ENABLE_PROBERTT,		"tcp_bbr_enable_probertt" },
+	{ CTL_INT,	NET_TCP_BBR_TARGETDELAY,			"tcp_bbr_targetdelay" },
+	{ CTL_INT,	NET_TCP_BBR_MINRTTWINSEC,			"tcp_bbr_minrttwinsec" },
+	{ CTL_INT,	NET_TCP_BBR_PROBERTTMODEMS,			"tcp_bbr_proberttmodems" },
+	{ CTL_INT,	NET_TCP_BBR_BW,						"tcp_bbr_bw" },
+	{ CTL_INT,	NET_TCP_BBR_BW_AUTO,				"tcp_bbr_bw_auto" },
+	/*
+	* End of custom Params
+	*/
 	{ CTL_INT,	NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS,	"tcp_workaround_signed_windows" },
 	{ CTL_INT,	NET_TCP_SLOW_START_AFTER_IDLE,		"tcp_slow_start_after_idle" },
 	{ CTL_INT,	NET_CIPSOV4_CACHE_ENABLE,		"cipso_cache_enable" },
diff -rupN "linux-4.13 - Copy/net/ipv4/sysctl_net_ipv4.c" linux-4.13-c2tcp/net/ipv4/sysctl_net_ipv4.c
--- "linux-4.13 - Copy/net/ipv4/sysctl_net_ipv4.c"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/net/ipv4/sysctl_net_ipv4.c	2018-03-24 17:14:31.731226900 -0400
@@ -670,6 +670,43 @@ static struct ctl_table ipv4_table[] = {
 		.extra1		= &one,
 		.extra2		= &gso_max_segs,
 	},
+	/*C2TCP params */
+	 {
+		 .procname   = "tcp_c2tcp_enable",
+		 .data       = &sysctl_tcp_c2tcp_enable,
+		 .maxlen     = sizeof(int),
+		 .mode       = 0644,
+		 .proc_handler   = proc_dointvec
+	 },
+	 {
+		 .procname   = "tcp_c2tcp_interval",
+		 .data       = &sysctl_tcp_c2tcp_interval,
+		 .maxlen     = sizeof(int),
+		 .mode       = 0644,
+		 .proc_handler   = proc_dointvec
+	 },
+	 {
+		 .procname   = "tcp_c2tcp_target",
+		 .data       = &sysctl_tcp_c2tcp_target,
+		 .maxlen     = sizeof(int),
+		 .mode       = 0644,
+		 .proc_handler   = proc_dointvec
+	 },
+	 {
+		 .procname   = "tcp_c2tcp_alpha",
+		 .data       = &sysctl_tcp_c2tcp_alpha,
+		 .maxlen     = sizeof(int),
+		 .mode       = 0644,
+		 .proc_handler   = proc_dointvec
+	 },
+	 {
+		 .procname   = "tcp_c2tcp_x",
+		 .data       = &sysctl_tcp_c2tcp_x,
+		 .maxlen     = sizeof(int),
+		 .mode       = 0644,
+		 .proc_handler   = proc_dointvec
+	 },
+	 /* End of */
 	{
 		.procname	= "tcp_pacing_ss_ratio",
 		.data		= &sysctl_tcp_pacing_ss_ratio,
@@ -710,6 +747,97 @@ static struct ctl_table ipv4_table[] = {
 		.mode		= 0444,
 		.proc_handler   = proc_tcp_available_ulp,
 	},
+	/*
+	* Custom bindings for SYSCTL BBR Params
+	*/
+	{
+		.procname	= "tcp_bbr_cwnd_rv_gain",
+		.data		= &sysctl_tcp_bbr_cwnd_rv_gain,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	},
+	{
+		.procname	= "tcp_bbr_enable_maxdelay",
+		.data		= &sysctl_tcp_bbr_enable_maxdelay,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	},
+
+	{
+		.procname	= "tcp_bbr_enable_probertt",
+		.data		= &sysctl_tcp_bbr_enable_probertt,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	},
+	{
+		.procname	= "tcp_bbr_targetdelay",
+		.data		= &sysctl_tcp_bbr_targetdelay,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	},
+	{
+		.procname	= "tcp_bbr_debug",
+		.data		= &sysctl_tcp_bbr_debug,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	},
+	{
+			.procname	= "tcp_bbr_enable_app_limited",
+			.data		= &sysctl_tcp_bbr_enable_app_limited,
+			.maxlen		= sizeof(unsigned int),
+			.mode		= 0644,
+			.proc_handler	= proc_douintvec,
+	},
+	{
+			.procname	= "tcp_bbr_enable_lt_bw",
+			.data		= &sysctl_tcp_bbr_enable_lt_bw,
+			.maxlen		= sizeof(unsigned int),
+			.mode		= 0644,
+			.proc_handler	= proc_douintvec,
+	},
+	{
+			.procname	= "tcp_bbr_bw_auto",
+			.data		= &sysctl_tcp_bbr_bw_auto,
+			.maxlen		= sizeof(unsigned int),
+			.mode		= 0644,
+			.proc_handler	= proc_douintvec,
+	},
+	{
+		.procname	= "tcp_bbr_init_cwnd",
+		.data		= &sysctl_tcp_bbr_init_cwnd,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	}
+	,{
+		.procname	= "tcp_bbr_bw",
+		.data		= &sysctl_tcp_bbr_bw,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	},
+	{
+		.procname	= "tcp_bbr_minrttwinsec",
+		.data		= &sysctl_bbr_min_rtt_win_sec,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	},
+	{
+		.procname	= "tcp_bbr_proberttmodems",
+		.data		= &sysctl_bbr_probe_rtt_mode_ms,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_douintvec,
+	},
+	/*
+	* End of
+	*/
 	{
 		.procname	= "icmp_msgs_per_sec",
 		.data		= &sysctl_icmp_msgs_per_sec,
diff -rupN "linux-4.13 - Copy/net/ipv4/tcp.c" linux-4.13-c2tcp/net/ipv4/tcp.c
--- "linux-4.13 - Copy/net/ipv4/tcp.c"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/net/ipv4/tcp.c	2018-03-24 17:14:31.731226900 -0400
@@ -300,6 +300,49 @@ atomic_long_t tcp_memory_allocated;	/* C
 EXPORT_SYMBOL(tcp_memory_allocated);
 
 /*
+* SYSCTL BBR PARAMS
+*/
+/* Enable Auto BW PROBING*/
+unsigned int sysctl_tcp_bbr_init_cwnd __read_mostly = 4;
+EXPORT_SYMBOL(sysctl_tcp_bbr_init_cwnd);
+
+unsigned int sysctl_tcp_bbr_enable_app_limited __read_mostly = 1;
+EXPORT_SYMBOL(sysctl_tcp_bbr_enable_app_limited);
+
+unsigned int sysctl_tcp_bbr_enable_lt_bw __read_mostly = 1;
+EXPORT_SYMBOL(sysctl_tcp_bbr_enable_lt_bw);
+
+unsigned int sysctl_tcp_bbr_bw_auto __read_mostly = 1;
+EXPORT_SYMBOL(sysctl_tcp_bbr_bw_auto);
+/* SET BW MANUALLY (Kbps)*/
+unsigned int sysctl_tcp_bbr_bw __read_mostly = 2000; //2000kbps
+EXPORT_SYMBOL(sysctl_tcp_bbr_bw);
+/* CWND GAIN*/
+unsigned int sysctl_tcp_bbr_cwnd_rv_gain __read_mostly = 1;
+EXPORT_SYMBOL(sysctl_tcp_bbr_cwnd_rv_gain);
+/* TCP BBR Debug */
+unsigned int sysctl_tcp_bbr_debug __read_mostly = 0;
+EXPORT_SYMBOL(sysctl_tcp_bbr_debug);
+/* Target Delay Enable */
+unsigned int sysctl_tcp_bbr_enable_maxdelay __read_mostly = 0;
+EXPORT_SYMBOL(sysctl_tcp_bbr_enable_maxdelay);
+/* Enable/Disable Probe RTT */
+unsigned int sysctl_tcp_bbr_enable_probertt __read_mostly = 1;
+EXPORT_SYMBOL(sysctl_tcp_bbr_enable_probertt);
+/* Target Delay Capping the min RTT */
+unsigned int sysctl_tcp_bbr_targetdelay __read_mostly = 0;
+EXPORT_SYMBOL(sysctl_tcp_bbr_targetdelay);
+/* Window length of min_rtt filter (in sec): */
+unsigned int sysctl_bbr_min_rtt_win_sec __read_mostly = 10;
+EXPORT_SYMBOL(sysctl_bbr_min_rtt_win_sec);
+/* Minimum time (in ms) spent at bbr_cwnd_min_target in BBR_PROBE_RTT mode: */
+unsigned int sysctl_bbr_probe_rtt_mode_ms __read_mostly = 200;
+EXPORT_SYMBOL(sysctl_bbr_probe_rtt_mode_ms);
+/*
+* End of Custom and Modded Params
+*/
+
+/*
  * Current number of TCP sockets.
  */
 struct percpu_counter tcp_sockets_allocated;
@@ -2766,6 +2809,104 @@ static int do_tcp_setsockopt(struct sock
 		tp->notsent_lowat = val;
 		sk->sk_write_space(sk);
 		break;
+	/*
+	 * Raw implementation of sockets.
+	 * Basically hacked the current code to set variables.
+	 * Complete rewrite and seperate socket implementation should be done.
+	*/
+	case TCP_BBR_EN_MAXDEL:
+		sysctl_tcp_bbr_enable_maxdelay = val;
+//		if (icsk->icsk_ca_ops->update_by_app) {
+//			icsk->icsk_ca_ops->update_by_app(sk);
+//			tcp_push_pending_frames(sk);
+//		}
+		break;
+	case TCP_BBR_EN_PRBRTT:
+		sysctl_tcp_bbr_enable_probertt = val;
+//		if (icsk->icsk_ca_ops->update_by_app) {
+//			icsk->icsk_ca_ops->update_by_app(sk);
+//			tcp_push_pending_frames(sk);
+//		}
+		break;
+	case TCP_BBR_TRGTDEL_US:
+		sysctl_tcp_bbr_targetdelay = val;
+//		if (icsk->icsk_ca_ops->update_by_app) {
+//			icsk->icsk_ca_ops->update_by_app(sk);
+//			tcp_push_pending_frames(sk);
+//		}
+		break;
+	case TCP_BBR_MINRTTWIN_SEC:
+		sysctl_bbr_min_rtt_win_sec = val;
+//		if (icsk->icsk_ca_ops->update_by_app) {
+//			icsk->icsk_ca_ops->update_by_app(sk);
+//			tcp_push_pending_frames(sk);
+//		}
+		break;
+	case TCP_BBR_PRBERTTMDE_MS:
+		sysctl_bbr_probe_rtt_mode_ms = val;
+//		if (icsk->icsk_ca_ops->update_by_app) {
+//			icsk->icsk_ca_ops->update_by_app(sk);
+//			tcp_push_pending_frames(sk);
+//		}
+		break;
+	case TCP_BBR_BWAUTO:
+		sysctl_tcp_bbr_bw_auto = val;
+//		if (icsk->icsk_ca_ops->update_by_app) {
+//			icsk->icsk_ca_ops->update_by_app(sk);
+//			tcp_push_pending_frames(sk);
+//		}
+		break;
+	case TCP_BBR_BWVAL:
+		sysctl_tcp_bbr_bw = val;
+//		sk->sk_max_pacing_rate=sysctl_tcp_bbr_bw*(USEC_PER_MSEC>>3); //sysctl_tcp_bbr_bw in kbps ==> rate in Bps.
+//		if (icsk->icsk_ca_ops->update_by_app) {
+//			icsk->icsk_ca_ops->update_by_app(sk);
+//			tcp_push_pending_frames(sk);
+//		}
+		break;
+	case TCP_BBR_CWNDRVGAIN:
+		sysctl_tcp_bbr_cwnd_rv_gain = val;
+//		if (icsk->icsk_ca_ops->update_by_app) {
+//			icsk->icsk_ca_ops->update_by_app(sk);
+//			tcp_push_pending_frames(sk);
+//		}
+		break;
+	case TCP_BBR_DEBUG:
+		sysctl_tcp_bbr_debug = val;
+		if (icsk->icsk_ca_ops->update_by_app) {
+			icsk->icsk_ca_ops->update_by_app(sk);
+			tcp_push_pending_frames(sk);
+		}
+		break;
+	case TCP_CWND_CLAMP:
+		if(sysctl_tcp_bbr_init_cwnd<=val/tp->mss_cache)
+			tp->snd_cwnd_clamp = val/tp->mss_cache;
+		if (icsk->icsk_ca_ops->update_by_app) {
+			icsk->icsk_ca_ops->update_by_app(sk);
+			tcp_push_pending_frames(sk);
+		}
+		break;
+/*C2TCP: PARAMETERS*/
+	case TCP_C2TCP_ENABLE:
+		sysctl_tcp_c2tcp_enable = val;
+		break;
+	case TCP_C2TCP_INTERVAL:
+		sysctl_tcp_c2tcp_interval= val;
+		break;
+	case TCP_C2TCP_TARGET:
+		sysctl_tcp_c2tcp_target= val;
+		break;
+	case TCP_C2TCP_ALPHA:
+		sysctl_tcp_c2tcp_alpha= val;
+		break;
+	case TCP_C2TCP_X:
+		sysctl_tcp_c2tcp_x= val;
+		break;
+
+	/*
+	 * End of custom implementation.
+	*/
+
 	default:
 		err = -ENOPROTOOPT;
 		break;
@@ -3179,6 +3320,41 @@ static int do_tcp_getsockopt(struct sock
 		}
 		return 0;
 	}
+	/*
+         * Raw implementation of sockets.
+         * Basically hacked the current code to set variables.
+         * Complete rewrite and seperate socket implementation should be done.
+        */
+        case TCP_BBR_EN_MAXDEL:
+                val = sysctl_tcp_bbr_enable_maxdelay;
+                break;
+        case TCP_BBR_EN_PRBRTT:
+                val = sysctl_tcp_bbr_enable_probertt;
+                break;
+        case TCP_BBR_TRGTDEL_US:
+                val = sysctl_tcp_bbr_targetdelay;
+                break;
+        case TCP_BBR_MINRTTWIN_SEC:
+                val = sysctl_bbr_min_rtt_win_sec;
+                break;
+        case TCP_BBR_PRBERTTMDE_MS:
+                val = sysctl_bbr_probe_rtt_mode_ms;
+                break;
+        case TCP_BBR_BWAUTO:
+                val = sysctl_tcp_bbr_bw_auto;
+                break;
+        case TCP_BBR_BWVAL:
+                val = sysctl_tcp_bbr_bw;
+                break;
+        case TCP_BBR_CWNDRVGAIN:
+                val = sysctl_tcp_bbr_cwnd_rv_gain;
+                break;
+        case TCP_BBR_DEBUG:
+                val = sysctl_tcp_bbr_debug;
+                break;
+        /*
+         * End of custom implementation.
+	*/
 	default:
 		return -ENOPROTOOPT;
 	}
diff -rupN "linux-4.13 - Copy/net/ipv4/tcp_cubic.c" linux-4.13-c2tcp/net/ipv4/tcp_cubic.c
--- "linux-4.13 - Copy/net/ipv4/tcp_cubic.c"	2017-09-03 16:56:17.000000000 -0400
+++ linux-4.13-c2tcp/net/ipv4/tcp_cubic.c	2018-03-24 17:14:31.762481400 -0400
@@ -27,6 +27,7 @@
 #include <linux/module.h>
 #include <linux/math64.h>
 #include <net/tcp.h>
+#include <net/codel.h>
 
 #define BICTCP_BETA_SCALE    1024	/* Scale factor beta calculation
 					 * max_cwnd = snd_cwnd * beta
@@ -58,6 +59,20 @@ static u32 cube_rtt_scale __read_mostly;
 static u32 beta_scale __read_mostly;
 static u64 cube_factor __read_mostly;
 
+/*C2TCP: System Params*/
+int sysctl_tcp_c2tcp_enable __read_mostly = 0;
+EXPORT_SYMBOL(sysctl_tcp_c2tcp_enable);
+int sysctl_tcp_c2tcp_interval __read_mostly = 100;
+EXPORT_SYMBOL(sysctl_tcp_c2tcp_interval);
+int sysctl_tcp_c2tcp_target __read_mostly = 100;
+EXPORT_SYMBOL(sysctl_tcp_c2tcp_target);
+int sysctl_tcp_c2tcp_alpha __read_mostly = 0;
+EXPORT_SYMBOL(sysctl_tcp_c2tcp_alpha);
+int sysctl_tcp_c2tcp_x __read_mostly = 1;
+EXPORT_SYMBOL(sysctl_tcp_c2tcp_x);
+/*End of*/
+
+
 /* Note parameters that are used for precomputing scale factors are read-only */
 module_param(fast_convergence, int, 0644);
 MODULE_PARM_DESC(fast_convergence, "turn on/off fast convergence");
@@ -102,6 +117,36 @@ struct bictcp {
 	u32	curr_rtt;	/* the minimum rtt of current round */
 };
 
+
+static void Newton_step(struct sock * sk)
+{
+   struct tcp_sock *tp = tcp_sk(sk);
+   u32 invsqrt = ((u32)tp->rec_inv_sqrt) << REC_INV_SQRT_SHIFT;
+   u32 invsqrt2 = ((u64)invsqrt * invsqrt) >> 32;
+   u64 val = (3LL << 32) - ((u64)tp->cnt_rtt * invsqrt2);
+
+   val >>= 2; /* avoid overflow in following multiply */
+   val = (val * invsqrt) >> (32 - 2 + 1);
+
+   tp->rec_inv_sqrt = val >> REC_INV_SQRT_SHIFT;
+}
+
+static codel_time_t control_law(codel_time_t t,
+				      codel_time_t interval,
+				      u32 rec_inv_sqrt)
+{
+	return t + reciprocal_scale(interval, rec_inv_sqrt << REC_INV_SQRT_SHIFT);
+}
+
+static void init_c2tcp(struct sock * sk)
+{
+   struct tcp_sock *tp = tcp_sk(sk);
+   tp->first_above_time=0;
+   tp->cnt_rtt=1;
+   tp->first_above_time=0;
+}
+//End of
+
 static inline void bictcp_reset(struct bictcp *ca)
 {
 	ca->cnt = 0;
@@ -149,7 +194,73 @@ static void bictcp_init(struct sock *sk)
 
 	if (!hystart && initial_ssthresh)
 		tcp_sk(sk)->snd_ssthresh = initial_ssthresh;
+	/*C2TCP*/
+	if (sysctl_tcp_c2tcp_enable)
+		init_c2tcp(sk);
+}
+/*C2TCP-Functionality */
+static void c2tcp_pkts_acked(struct sock *sk,u32 cnt,s32 rtt_us)
+{
+   const struct inet_connection_sock *icsk = inet_csk(sk);
+   struct tcp_sock *tp = tcp_sk(sk);
+//   struct bictcp *ca = inet_csk_ca(sk);
+   u32 tmp,tmp2;
+   codel_time_t c2tcp_target=MS2TIME(sysctl_tcp_c2tcp_target);
+   codel_time_t c2tcp_interval=MS2TIME(sysctl_tcp_c2tcp_interval);
+   codel_time_t now=codel_get_time();
+   codel_time_t c2tcp_rtt=MS2TIME(rtt_us/USEC_PER_MSEC);
+   codel_time_t c2tcp_next_time=MS2TIME(tp->next_time/USEC_PER_MSEC);
+
+   if(codel_time_after_eq(c2tcp_target,c2tcp_rtt))
+   {
+       tp->first_above_time=0;
+       tp->cnt_rtt=1;
+       //tp->first_time=0;
+//     bictcp_update(ca, tp->snd_cwnd);
+       tmp2=(rtt_us/USEC_PER_MSEC);
+       if (tmp2==0)
+           tmp2++;
+       tmp=(sysctl_tcp_c2tcp_alpha+sysctl_tcp_c2tcp_target/tmp2);
+       if(tmp==0)
+           tmp++;
+//     tcp_cong_avoid_ai(tp, ca->cnt/tmp);
+       tp->snd_cwnd_cnt+=tmp;
+       if (tp->snd_cwnd_cnt >= tp->snd_cwnd) {
+           if (tp->snd_cwnd < tp->snd_cwnd_clamp)
+               tp->snd_cwnd++;
+           tp->snd_cwnd_cnt = 0;
+       }
+//     else {
+//         tp->snd_cwnd_cnt+=tmp;
+//     }
+
+//     printk(KERN_INFO "c2tcp triggerd! increasing cwnd");
+  }
+  else if (tp->first_above_time==0)
+  {
+      tp->first_above_time=codel_time_to_us((now+c2tcp_interval));
+      tp->next_time=tp->first_above_time;
+       //tp->first_time=1;
+       tp->cnt_rtt=1;
+       tp->rec_inv_sqrt= ~0U >> REC_INV_SQRT_SHIFT;
+       Newton_step(sk);
+   }
+   else if (codel_time_after(now,c2tcp_next_time))
+   {
+       c2tcp_next_time=control_law(now,c2tcp_interval,tp->rec_inv_sqrt);
+
+       tp->next_time=codel_time_to_us(c2tcp_next_time);
+       tp->cnt_rtt++;
+       Newton_step(sk);
+
+       tp->prior_ssthresh = tcp_current_ssthresh(sk);
+       tp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);
+       tp->snd_cwnd       = 1;
+       tp->snd_cwnd_cnt   = 0;
+//     printk(KERN_INFO "c2tcp triggerd! cnt:%d, changing ssthresh from %d to %d\n",tp->cnt_rtt-1,tp->prior_ssthresh,tp->snd_ssthresh);
+   }
 }
+/* End of ... */
 
 static void bictcp_cwnd_event(struct sock *sk, enum tcp_ca_event event)
 {
@@ -463,6 +574,15 @@ static void bictcp_acked(struct sock *sk
 	if (hystart && tcp_in_slow_start(tp) &&
 	    tp->snd_cwnd >= hystart_low_window)
 		hystart_update(sk, delay);
+	/* C2TCP Functionality */
+	 if (sysctl_tcp_c2tcp_enable)
+	     c2tcp_pkts_acked(sk, sample->pkts_acked, sample->rtt_us);
+}
+
+static void natcp_update_by_app(struct sock *sk)
+{
+	struct tcp_sock *tp = tcp_sk(sk);
+	tp->snd_cwnd =min(tp->snd_cwnd,tp->snd_cwnd_clamp);
 }
 
 static struct tcp_congestion_ops cubictcp __read_mostly = {
@@ -472,6 +592,8 @@ static struct tcp_congestion_ops cubictc
 	.set_state	= bictcp_state,
 	.undo_cwnd	= bictcp_undo_cwnd,
 	.cwnd_event	= bictcp_cwnd_event,
+	//S.A: To support NATCP
+	.update_by_app	= natcp_update_by_app,
 	.pkts_acked     = bictcp_acked,
 	.owner		= THIS_MODULE,
 	.name		= "cubic",
